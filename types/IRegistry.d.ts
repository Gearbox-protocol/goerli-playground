/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRegistryInterface extends ethers.utils.Interface {
  functions: {
    "gauge_controller()": FunctionFragment;
    "get_address(uint256)": FunctionFragment;
    "get_gauges(address)": FunctionFragment;
    "get_lp_token(address)": FunctionFragment;
    "get_registry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "gauge_controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_address",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get_gauges", values: [string]): string;
  encodeFunctionData(
    functionFragment: "get_lp_token",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_registry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "gauge_controller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_gauges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_lp_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_registry",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRegistryInterface;

  functions: {
    gauge_controller(overrides?: CallOverrides): Promise<[string]>;

    get_address(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    get_gauges(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    get_lp_token(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    get_registry(overrides?: CallOverrides): Promise<[string]>;
  };

  gauge_controller(overrides?: CallOverrides): Promise<string>;

  get_address(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  get_gauges(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    ]
  >;

  get_lp_token(arg0: string, overrides?: CallOverrides): Promise<string>;

  get_registry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    gauge_controller(overrides?: CallOverrides): Promise<string>;

    get_address(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    get_gauges(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    get_lp_token(arg0: string, overrides?: CallOverrides): Promise<string>;

    get_registry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    gauge_controller(overrides?: CallOverrides): Promise<BigNumber>;

    get_address(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_gauges(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_lp_token(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_registry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    gauge_controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_address(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_gauges(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_lp_token(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
